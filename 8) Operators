# Operators
An operator is a symbol that performs a certain operation between operands.
ex:- a+b  here a,b are operands and '+' is an operator. 

Types of Operators
- Arithmetic Operators (+,-,*,/,%,**)
- Relational / Comparision Operators (==,!=,>,<,>=,<=)
- Assignment Operators (=,+=,-=,*=,/=,%=,**=)
- Logical Operators (not, and, or)

# Arithmetic Operators
Perform the following operations
+ => Addition
- => Subtraction
* => Multiplication
/ => Division (Quotient)
% => Modulo Division (Remainder)
** => Exponential (Power - a^b)

# Do practice with arithmetic operators like this replacing '*' with other operators in the below program.
   a = 3
   b = 2
   sum = a * b
   print(sum)
   Output:-
     6

# Let's try this
a = 5
b = 2
print(a+b)     # 7
print(a-b)     # 3
print(a*b)     # 10
print(a/b)     # 2.5
print(a%b)     # 1
print(a**b)    # 25

# Relational Operators / Comparision Operators
Compare two operands
To check the relation or to compare we use Relational Operators
It checks whether the given relation is true or false

# Let's try this
a = 50
b = 20
print(a==b)    # False
print(a!=b)    # True
print(a>b)     # True
print(a<b)     # False
print(a>=b)    # True
print(a<=b)    # False

# Assignment Operators
Assign the values

# Let's try this

num = 10
num = num + 10      # 10 + 10 = 20
num +=10            # num += 10 is same as num = num + 10    therefore 20 + 10 = 30
num -= 5            # 30 - 5 = 25  
num /=5             # 25 / 5 = 5
num *= 3            # 5 * 3 = 15
num %= 6            # 15 % 6 = 3
num **=3            # 3 ** 3 = 27
print(num)          # 27.0

# Logical Operators
Boolean Values
- not
    not True => False
    not False => True
- or
    True or False => True
    True or True => True
    False or True => True
    False or False => False
- and
    True and False => False
    True and True => True
    False and True => False
    False and False => False


val1 = True
val2 = false
print(not (val1))      # False
print(not (val2))      # True
print(val1 and val2)   # False
print(val1 or val2)    # True


